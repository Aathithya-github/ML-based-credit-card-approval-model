# -*- coding: utf-8 -*-
"""credit card_nn_CA3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ex0uggkG0Zl5LeaqGMz6Imuk2zjWbQs5
"""

import numpy as np
import pandas as pd
df = pd.read_csv('/content/clean_dataset (1).csv')
df=df.drop(['Industry'], axis= 1)
df.head(15)

#Display unique target/output values
print(np.unique(df['Approved']))
#Describing the dataset
df.describe()

#Separating the features and output column in the dataset
X = df.iloc[:,0:15]
y = df.iloc[:,-1]

from sklearn.feature_selection import chi2
from sklearn.feature_selection import SelectKBest
#Selecting the best features from the dataset
kbest = SelectKBest(chi2,k=15)

best_features = kbest.fit(X,y)
best_features.scores_

df_features = pd.DataFrame(best_features.scores_)
df_columns = pd.DataFrame(X.columns)

#Adding the selected features to the dataset
featureScores = pd.concat([df_columns,df_features],axis=1)

#Display the features and their respective scores
featureScores.columns = ['Features','Score']
featureScores.sort_values(by='Score',ascending=False)

X = df[['Income','ZipCode','CreditScore','Approved','YearsEmployed','PriorDefault','Debt','Employed','Age','BankCustomer','Married','Ethnicity','Citizen','DriversLicense','Gender']]
X

#Display the dimensions of the features and output column
X = X.values
y = y.values
print(X.shape,y.shape)

#Standardizing and normalising the values in the dataset
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X = sc.fit_transform(X)
y = y.reshape(-1,1)

#Transforming the output column to hot encoded form
from sklearn.preprocessing import OneHotEncoder
ohot = OneHotEncoder()
y = ohot.fit_transform(y)
y = y.toarray()

#Splitting the dataset into testing and training parts
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=0)

# Commented out IPython magic to ensure Python compatibility.
import keras
from keras.models import Sequential
from keras.layers import *
import matplotlib.pyplot as plt
# %matplotlib inline

#Training the network using Gaussian/Radial activation function
model = Sequential()
model.add(Dense(16,activation='gelu',input_dim = 15))
model.add(Dense(8,activation='gelu'))
model.add(Dense(2,activation='gelu'))
model.summary()

model.compile(loss='categorical_crossentropy',optimizer='Adam',metrics=['accuracy'])

#Displaying the loss accuracy, value loss and value accuracy for each epoch
history = model.fit(X_train,y_train,epochs=200,validation_data=(X_test,y_test),batch_size=64)

y_pred = model.predict(X_test)

#Inverse one hot encoding
pred = []
for i in range(len(y_pred)):
    pred.append(np.argmax(y_pred[i]))

#Inverse encoding for y_test labels

test = []
for i in range(len(y_test)):
    test.append(np.argmax(y_test[i]))

from sklearn.metrics import accuracy_score
acc = accuracy_score(pred,test)
print("Accuracy of Your Model is = " + str(acc*100))

plt.plot(history.history['accuracy'])
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend(['Approved'],loc='upper left')
plt.show()

plt.plot(history.history['loss'])
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend(['Approved'],loc='upper left')
plt.show()